 
#include "metrics.fcl" 

services: {

scheduler: {

errorOnFailureToPut: false 

}
NetMonTransportServiceInterface: {

service_provider: NetMonTransportService 

destinations: {

}
routing_table_config: {

use_routing_master: false 

}
}
}
daq: {

event_builder: {

expected_fragments_per_event: 0 # Will be set by DAQInterface
# Will be set by DAQInterface
max_fragment_size_bytes: 100000000 

use_art: true 

print_event_store_stats: true 

buffer_count: 20 

max_incomplete_events: 75 # Same as boardreader sync interval
# Same as boardreader sync interval
verbose: false 

send_requests: true 

request_port: 3001 # Can be set by DAQInterface
# Can be set by DAQInterface
request_address: "227.128.12.26" # Can be set by DAQInterface        
# Can be set by DAQInterface        
routing_token_config: {

use_routing_master: false 

}
sources: {

}
}
}
outputs: {

rootNetOutput: {

module_type: RootNetOutput 

}
fileDumperOutput: {

module_type: FileDumperOutput 

wantProductFriendlyClassName: true 

}
}
physics: {

analyzers: {

printBuildInfo: {

module_type: PrintBuildInfo 

buildinfo_module_label: BuildInfo 

buildinfo_instance_label: IcarusArtdaq 

}
dump: {

module_type: PhysCrateDump 

raw_data_label: "daq" 

num_adcs_to_show: 1024 # Obviously this should be no more than ADC counts per fragment

}
qscan: {

module_type: PhysCrateWriteICARUSDataFile 

raw_data_label: "daq" 

file_output_location: "/data/icartdaq" 

file_output_name: "icartdaq_qscanFormat" 

}
view: {

module_type: PhysCrateViewer 

raw_data_label: "daq" 

}
}
producers: {

BuildInfo: {

module_type: IcarusArtdaqBuildInfo 

instance_name: IcarusArtdaq 

}
}
filters: {

}
p1: [BuildInfo] 

a1: [printBuildInfo] 

my_output_modules: [rootNetOutput, fileDumperOutput] 

}
source: {

module_type: IcarusInput 

waiting_time: 2500000 

resume_after_timeout: true 

}
process_name: DAQ 
