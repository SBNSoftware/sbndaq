  daq: {
fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: PhysCrateData 

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_id: 0
   board_id: 0

   nADCBits: 12   
   SamplesPerChannel: 4096
   ChannelsPerBoard: 64

   nBoards: 9
   BoardIDs: [ 0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108 ]
   CrateID: 0x1
   
   CompressionScheme: 0

   VetoPort: 7654
   VetoHost: "137.138.194.204"
   DoVetoTest: false
   VetoTestPeriod: 1e6

   TestPulseType: 0 #0 - disable, 1 - external, 2 - internal_even, 3 - internal_odd
   DCOffsetTestPulse: 0x8000   
   
   DCOffsetA: 0x8000
   DCOffsetB: 0x8000
   DCOffsetC: 0x8000
   DCOffsetD: 0x8000

   destinations:{ }

   routing_table_config: {
     use_routing_master: false 
  }
}  		 

  metrics: {
    brFile: {
      metricPluginType: "file"
      level: 3
      fileName: "/daq/scratch/metrics/br_%UID%_metrics.log"
      uniquify: true
    }
    redis_10s: {
          metricPluginType: "redis"
      level: 3
      reporting_interval: 10.0
      redis_key_postfix: ":10s" 
      maxlen: 10000
      redis_key_prefix: "DABBoardReader:tpc01:"
      redis_passfile: "/var/adm/krb5/redis_password"
    }
    redis_testing: {
      metricPluginType: "redis"
      level: 3
      reporting_interval: 30.0
      redis_key_postfix: ":testing"
      maxlen: 10000
      redis_key_prefix: "DABBoardReader:tpc01:"
      redis_passfile: "/var/adm/krb5/redis_password"
    }
    redis_5m: {
      metricPluginType: "redis"
      level: 3
      reporting_interval: 300.0
      redis_key_postfix: ":5m" 
      maxlen: 10000
      redis_key_prefix: "DABBoardReader:tpc01:"
      redis_passfile: "/var/adm/krb5/redis_password"
    }
  }


}
