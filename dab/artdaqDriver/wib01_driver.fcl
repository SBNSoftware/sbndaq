
# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"
# Originally taken from protoDUNE and adapted for SBND
#
events_to_generate: 1
run_number: 101
transition_timeout: 30
debug_cout: true 
# Default FEMB configuration, declared here as a local variable for 
#  later reference in the main block

femb_config_default: 
{
  # this must match the FEMB firmware version (hex)
  expected_femb_fw_version: 0x323

  # if true, enables FEMB fake data mode, else real data
  enable_fake_data: false
  # Select the fake data type
  fake_data_select: "fake_word" # options: fake_word, fake_waveform, femb_channel_id, or counter_channel_id
  # The fake data word for fake_word mode
  fake_word: 0xFEB # 12 bits
  
  # FE gain value select
  gain: 2 # 0 (4.7 mV/fC), 1 (7.8 mV/fC), 2 (14 mV/fC), 3 (25 mV/fC)

  # FE shaping time select
  shape: 2 # 0 (0.5 us), 1 (1 us), 2 (2 us), 3 (3 us)

  # FE baseline select (don't need to change)
  baselineHigh: 2 # 0 (200 mV), 1 (900 mV), 2 (200 mV for collection and 900 mV for induction channels)

  # 1 for 500 pA FE leakage current, 0 for 100 pA (don't need to change)
  leakHigh: 1 # 0 (100 pA), 1 (500 pA)

  # 1 for 10x FE leakage current, 0 for 1x
  leak10X: 0 # (if 1, multiply leakage by 10)

  # 1 for AC coupling between FE and ADC channels, 0 for DC coupling
  acCouple: 0 # 0 (DC coupling), 1 (AC coupling)

  # 1 to use FE output buffer, 0 to bypass
  buffer: 0 # 0 (bypass), 1 (use buffer)

  # 0 to use ADC ASIC internal clocking, 1 to use external FPGA clocking
  extClk: 1 # Almost always want 1

  # List of 32 bit ADC FIFO clock phases, will try each phase until header bits line up
  clk_phases: [0xFFFF,0xFDFF,0xEFEF,0xBFBF,0xBDFF]

  # Calibration pulser mode
  pls_mode: 0 # 0 off, 1 internal, 2 FPGA external

  # Calibration pulser amplitude 
  pls_dac_val: 0 # 6 bits in internal mode, 5 bits in external

  # 1 to make FPGA to WIB header frame as BU WIB expects
  start_frame_mode_sel: 1

  # 1 to swap bytes in header frame
  start_frame_swap: 1
}

femb_config_default_femb1: @local::femb_config_default
femb_config_default_femb2: @local::femb_config_default
femb_config_default_femb3: @local::femb_config_default
femb_config_default_femb4: @local::femb_config_default
 
femb_config_default_femb1.fake_word: 0xFE1
femb_config_default_femb2.fake_word: 0xFE2
femb_config_default_femb3.fake_word: 0xFE3
femb_config_default_femb4.fake_word: 0xFE4


fragment_receiver:
{
  generator: WIBReader 
  partition_number: 999 
  fragment_type: TPC 
  fragment_id: 411 
  board_id: 11
  destinations: {}
  sends_no_fragments: true 

  # WIB configuration
  WIB: 
  {
    # WIB network address string
    #address: "sbnd-wib01.fnal.gov" # can be either IP address or DNS address
    address: "192.168.230.50" # can be either IP address or DNS address

    # WIB register map
    wib_table: "WIB_SBND_REGS.adt"

    # FEMB register map
    femb_table: "SBND_FEMB.adt"

    # this must match the WIB firmware version (hex)
    expected_wib_fw_version_rce: 0x18072501
    expected_wib_fw_version_felix: 0x18072501
    expected_wib_fw_version: 0x108

    # this must match the WIB firmware version
    expected_daq_mode: "any" # "RCE", "FELIX", or "any"

    # If true, transmit fake data from WIB, if false data from FEMBs
    use_WIB_fake_data: [false,false,false,false] # list of 4 bools

    # if false, put a counters in the DAQ data frame, if true just transmit a raw counter
    use_WIB_fake_data_counter: false # only applies when use_WIB_fake_data is true for a FEMB

    # if true, generate the clock on the WIB, if false, use timing system clock
    local_clock: false

    # Where to get the timing system input from
    DTS_source: 0 # 0 back plane, 1 front panel

    # Which timing system partion or "timing group" to use
    partition_number: 0

    # if true, power up and configure FEMBs, else power down and don't configure
    enable_FEMBs: [true,true,true,true] # list of 4 bools

    # FEMB configuration documents
    FEMBs: [@local::femb_config_default_femb1,@local::femb_config_default_femb2,@local::femb_config_default_femb3,@local::femb_config_default_femb4] # list of 4 FEMB configurations

    # If these are true, then won't raise an exception--will keep going
    continueOnError: 
    {
      # if true, continue on to the next FEMB
      FEMBRegReadError: false # if you can't seem to control an FEMB
      # if true, continue on to the next FEMB
      FEMBSPIError: false # if you can't program the FE and ADC ASICs
      # if true, continue on to the next FEMB
      FEMBSyncError: false # if you can't get the ADC-FPGA data path sync'd
      # if true, continue on to the next FEMB
      ListOfFEMBClockPhasesDontSync: true # if true, will try to hunt for the proper phase, else error
    }

    #Use full reset over checked
    force_full_reset: false

    #Time to wait after setting do-not-disturb (unsigned int seconds)
    dnd_wait_time: 10

    #Number of times to try configuring before giving up
    configuration_tries: 3
  }

  metrics: 
  {
    # Need to convert DIM to EPICS, comment out for now
    #dim: 
    #{
    #  metricPluginType: dim 
    #  level_string: "1,2,11-20" 
    #  reporting_interval: 5.0 
    #  Verbose: false 
    #  DNSPort: 2505 
    #  DNSNode: "np04-srv-010.cern.ch" 
    #  DIMServerName: WIBReader 
    #  IDName: wibdefault
    #}
  }
}


event_builder: {

  expected_fragments_per_event: 1
  max_fragment_size_bytes: 100000000
  buffer_count: 10
  use_art: true
  print_event_store_stats: false
  verbose: true
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

######################################################################
# The ART code
######################################################################

art: {
  services: {
    ArtdaqSharedMemoryServiceInterface: { service_provider: ArtdaqSharedMemoryService }
    TimeTracker: {}
  ArtdaqFragmentNamingServiceInterface: { service_provider: ArtdaqFragmentNamingService helper_plugin: "SBND" }
  }

physics:
{
  analyzers:{}
  
  # n.b. if you wish to generate more than one fragment per event, toyDump should be disabled
#
#    toyDump:
#    {
#      module_type: ToyDump
#      raw_data_label: daq
#      frag_type: @local::fragment_receiver.fragment_type
#      num_adcs_to_show: 10   # Obviously this should be no more than ADC counts per fragment
#    }
#
#    printBuildInfo: {
#      module_type: PrintBuildInfo 
#      buildinfo_module_label: BuildInfo 
#      buildinfo_instance_label: DuneArtdaq 
#    }


  producers:{}
#    BuildInfo:
#    {
#     module_type: DuneArtdaqBuildInfo
#     instance_name: DuneArtdaq
#    }

  filters:{}
#  p0: [ BuildInfo ] 

#  a0: [ printBuildInfo]

  #a1: [ toyDump ]
  a1: [ ]

#  e1: [ out1, rootout ]
  e1: [  ]

#  end_paths: [ a1, e1, p0, a0]
#  end_paths: [ a1, e1 ]
  end_paths: [ e1 ]
}

outputs:
{
 # out1:
 # {
 #   module_type: FileDumperOutput
 #   wantProductFriendlyClassName: true
 # }

  rootout:
  {
    module_type: RootOutput
    fileName: "/data1/wib.root"
    compressionLevel: 0
  }

}

source:
{
  module_type: ArtdaqInput
  waiting_time: 900
  resume_after_timeout: true
}

process_name: Driver
}
