daq: 
{
  fragment_receiver: 
  {

    generator:   CAENV1730Readout
    fragment_type: CAENV1730
    max_fragment_size_bytes: 30000000
    GetNextFragmentBunchSize: 20

    # these don't exist as fcl parameters?
    fragment_id: 0
    board_id:    0
    
    Verbosity: 1
    SWTrigger: false

    # begin run ADC calibration
    CalibrateOnConfig: true
    
    # read and write some calibration parameters
    AdcCalibration: false

    # Turn on or off automatic mid-run temperature correction
    LockTempCalibration: true

    # ModeLVDS 0=REGISTER, 1=TRIGGER, 2=nBUSY/nVETO, 3=LEGACY
    # SBND: keep this parameter = 0
    ModeLVDS: 1

    # new fcl parameters added by ICARUS
    # Aiwu added here to set LVDS logic values: 3: logics OR, 0: logic AND; (not so clear about 1 and 2)
    # Exclusive for ICARUS
     LVDSLogicValueG1: 3
     LVDSLogicValueG2: 3
     LVDSLogicValueG3: 3
     LVDSLogicValueG4: 3
     LVDSLogicValueG5: 3
     LVDSLogicValueG6: 3
     LVDSLogicValueG7: 3
     LVDSLogicValueG8: 3
     
     # Aiwu added here to set LVDS output width: N*8ns will be the width!
     # Exclusive for ICARUS
     LVDSOutWidthC1: 20
     LVDSOutWidthC2: 20
     LVDSOutWidthC3: 20
     LVDSOutWidthC4: 20
     LVDSOutWidthC5: 20
     LVDSOutWidthC6: 20
     LVDSOutWidthC7: 20
     LVDSOutWidthC8: 20
     LVDSOutWidthC9: 20
     LVDSOutWidthC10: 20
     LVDSOutWidthC11: 20
     LVDSOutWidthC12: 20
     LVDSOutWidthC13: 20
     LVDSOutWidthC14: 20
     LVDSOutWidthC15: 20
     LVDSOutWidthC16: 20
    
     # Aiwu added here: self trigger plority, it is 0x10 (or 16 in decimal, or 0010000) by default, we want to change bit[6] from 0 to 1, so 0x30 (or 80 in decimal, or 1010000)
     # Exclusive for ICARUS
     SelfTrigBit: 16

    # SelfTriggerMode: channel auto trigger settings. Since in x730 boards even and odd 
    # channels are paired, their 'SelfTriggerMode' value will be equal to the 
    # OR combination of the pair, unless one of the two channels of
    # the pair is disabled (by 'SelfTriggerMask' parameter). 
    # If so, the other one behaves as usual.
    # SelfTriggerMode 0:DISABLED 1:ACQ_ONLY 2:TRGOUT_ONLY 3:ACQ_AND_TRGOUT
    SelfTriggerMode: 0

    # SelfTriggerMask: the channel mask (16bit-number) you will enable the 'SelfTriggerMode'
    # Each bit enables/disables one channel
    # 65535: all channels are enabled
    SelfTriggerMask: 255

    # Majority mode logic
    # For level m, the trigger fires when at least m+1 of the enabled trigger pairs fire
    # Exclusive for SBND
    # ICARUS: (should not interfere but) keep this parameter = 0
    majorityLevel: 0

    # Sets the time window for the majority coincidence in units of the Trigger Clock (8 ns) 
    # 'majorityLevel' must be set different from 0.
    # min: 0, max: 15
    # Exclusive for SBND
    # ICARUS: (should not interfere but) keep this parameter = 0
    majorityCoincidenceWindow: 0
    
    # Set self trigger logic
    # triggerLogic 0: AND, 1: ONLYA, 2: ONLYB, 3:OR
    # Exclusive for SBND
    # ICARUS: (should not interfere but) keep this parameter = 3
    triggerLogic: 3

    allowTriggerOverlap: true

    link: 0
    enableReadout: 1
    
    boardId: 0
    recordLength:         5000
    maxEventsPerTransfer: 1
    runSyncMode:          0
   
    outputSignalMode:     0    
    usePedestals:         false
    dacValue:             32768
    
    # ioLevel: 0=NIM, 1=TTL
    ioLevel:              1
    nChannels:            16
    
    # extTrgMode decides whether the external trigger should only be used to generate the
    # acquisition trigger, only to generate the trigger output or both
    # extTrgMode: 0=DISABLED; 1=ACQ_ONLY; 2=TRGOUT_ONLY; 3=ACQ_AND_TRGOUT
    extTrgMode:           3
    
    # swTrgMode decides whether the trigger software should only be used to generate the 
    # acquisition trigger, only to generate the trigger output or both. 
    # you should set 'SWTrigger: true' to enable software triggers
    # swTrgMode:  0=DISABLED; 1=ACQ_ONLY; 2=TRGOUT_ONLY; 3=ACQ_AND_TRGOUT
    swTrgMode:            0
    
    # acqMode: 0=Software Controlled, 1=Front Panel S_IN
    acqMode:              0
    
    # triggerPolarity: 0=positive (trigger on rising edge), 1= negative (trigger on falling edge)
    # Exclusive for SBND
    # ICARUS: (should not interfere but) keep this parameter = 0
    triggerPolarity:      0 
    
       
    debugLevel:           7
    postPercent:          70

    # Use or not use the interrupts
    InterruptEnable: 0
    # Timeout value
    IRQTimeoutMS: 100
    
    eventsPerInterrupt:   1
    irqWaitTime:          1
    eventCounterWarning:  1       
    memoryAlmostFull:     2    
    
    readoutMode:          0
    testPattern:          0
    
    # SBND: MTC/A input
    # See CAEN User Manual UM2792, page 51
    # trigger majority mode: 0; test mode (saw-tooth signal with 1V amplitude): 1 
    # buffer ocuppancy mode: 3; voltage level mode: 4 
    analogMode:           1
    

    channelPedestal0:  6554
    channelPedestal1:  6554
    channelPedestal2:  6554
    channelPedestal3:  6554
    channelPedestal4:  6554
    channelPedestal5:  6554
    channelPedestal6:  6554
    channelPedestal7:  6554
    channelPedestal8:  6554
    channelPedestal9:  6554
    channelPedestal10: 6554
    channelPedestal11: 6554
    channelPedestal12: 6554
    channelPedestal13: 6554
    channelPedestal14: 6554
    channelPedestal15: 6554


    channelEnable0:    true
    channelEnable1:    true
    channelEnable2:    true
    channelEnable3:    true
    channelEnable4:    true
    channelEnable5:    true
    channelEnable6:    true
    channelEnable7:    true
    channelEnable8:    true
    channelEnable9:    true
    channelEnable10:   true
    channelEnable11:   true
    channelEnable12:   true
    channelEnable13:   true
    channelEnable14:   true
    channelEnable15:   true

    # Trigger pulse width for TRG_OUT and MON outputs
    # Width will be (triggerPulseWidth)*8ns
    # Exclusive for SBND, ICARUS keep to 20
    triggerPulseWidth: 20
    
    BoardChainNumber: 0
    GetNextSleep: 10

    InterruptLevel: 0
    InterruptStatusID: 0
    InterruptEventNumber: 1

    CombineReadoutWindows: false

    # 0 = 2 V dynamic range, 1 = 0.5 V 
    # register 0x8028
    dynamicRange: 0 

    # these are overwritten by each board
    triggerThreshold0:  0
    triggerThreshold1:  0
    triggerThreshold2:  0
    triggerThreshold3:  0
    triggerThreshold4:  0
    triggerThreshold5:  0
    triggerThreshold6:  0
    triggerThreshold7:  0
    triggerThreshold8:  0
    triggerThreshold9:  0
    triggerThreshold10: 0
    triggerThreshold11: 0
    triggerThreshold12: 0
    triggerThreshold13: 0
    triggerThreshold14: 0
    triggerThreshold15: 0

    CircularBufferSize: 500e6

    # added just because it's in the ICARUS config file
    TimeOffsetNanoSec: 0
    
    destinations: { }

    routing_table_config: {
      use_routing_master: false 
    }

    circular_buffer_mode: true 

    receive_requests: true 

    # -- multicast request address
    request_address: "227.128.12.35" 

    # -- should match the private net
    multicast_interface_ip: "192.168.191.0" 
   
    # -- should match the private net 
    request_port: 3502 # UDP request port
    
    #window: request over a set time interval
    request_mode: window 

    # Alow use of NPT server time to form fragment timestamp and TriggerTimeTag
    UseTimeTagForTimeStamp: true 
   
    # Size of the request window (3 ms, covers 2 ms expected plus a little bit)
    request_window_width: 3000000 
    
    # Start 1.5 ms before
    request_window_offset: 1500000 

    # We want our fragments to appear multiple times in our request window if necessary
    request_windows_are_unique: true 

    # True for pull modes
    separate_data_thread: true 
   
    # Max waiting time for new fragments (2 second, too large/small?!) also not sure and keep commented
    stale_fragment_timeout: 2000000000 

    # Max waiting time before the board reader sends the fragments in its buffer
    window_close_timeout_us: 3000e3 

    data_buffer_depth_fragments: 20000 

    data_buffer_depth_mb: 4000 

    poll_hardware_status: true 

    hardware_poll_interval_us: 1e6 

    separate_monitoring_thread: true 

  }  


  metrics: {
    brFile: {
      metricPluginType: "file"
      level: 3
      fileName: "/scratch/log/br_%UID%_metrics.log"
      uniquify: true
    }
    
    send_system_metrics: true
    send_process_metrics: true

    graphite: {
      namespace: "icarus.icaruspmt00."
      host: "192.168.191.31"
      level: 10
      metricPluginType: "graphite"
      port: 2003
      reporting_interval: 10
    }
   
  }
}
