# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 50
run_number: 99999
debug_cout: true

fragment_receiver: {

generator: PhysCrateData 

max_fragment_size_bytes: 5000000 

generated_fragments_per_event: 1 

fragment_id: 0 

board_id: 0 

nADCBits: 12 

SamplesPerChannel: 4096 

ChannelsPerBoard: 64 
# BoardIDs: [ 0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108 ]
CrateID: 0x1 

CompressionScheme: 0 

VetoPort: 7654 

VetoHost: "137.138.194.204" 

DoVetoTest: false 

VetoTestPeriod: 1e6 

pcieLinks: [0, 1] 

TestPulseType: 0 #0 - disable, 1 - external, 2 - internal_even, 3 - internal_odd

TestPulseAmpODD: [0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000] 

TestPulseAmpEVEN: [0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000] 

DACOffset1: [0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000] 
#DACOffset2: [ 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000 ]
DACOffset2: [0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000] 

separate_data_thread: true 
#true if pulser trigger input...false if trigger board provides TTLINK
issueStart: true 

destinations: {

}
routing_table_config: {

use_routing_master: false 

}#pull mode configuration	
receive_requests: false

request_address: "227.128.12.35" # -- multicast request address
# -- multicast request address
multicast_interface_ip: "192.168.191.0" # -- should match the private net 
# -- should match the private net 
request_port: 3502 # UDP request port
# UDP request port
request_mode: ignore #match sequenceID of request
#match sequenceID of request
data_buffer_depth_fragments: 10000 

data_buffer_depth_mb: 2000 

}
metrics: {

brFile: {

metricPluginType: "file" 

level: 3 

fileName: "/daq/log/metrics/br_%p_metrics.log" 

uniquify: true 

}
send_system_metrics: true 

send_process_metrics: true 

graphite: {

level: 10 

metricPluginType: "graphite" 

reporting_interval: 10.0 

host: "192.168.191.18" 

port: 2003 

namespace: "icarus.tpc00." 

}

}  		  
 
event_builder: {

  expected_fragments_per_event: 1
  max_fragment_size_bytes: 0x10000000
  buffer_count: 20 
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

######################################################################
# The ART code
######################################################################
art: {

  services: {
    ArtdaqSharedMemoryServiceInterface: { service_provider: ArtdaqSharedMemoryService }
    TimeTracker: {}
    ArtdaqFragmentNamingServiceInterface: { service_provider: ArtdaqFragmentNamingService helper_plugin: "Icarus" }
  }

physics:
{
  analyzers:
  {
  }

  producers:
  {
  }

  p1: [ ]
  e1: [ out1, rootout ]
  end_paths: [ e1 ]
}

outputs:
{

 rootout:
  {
    module_type: RootOutput
    fileName: "/home/nfs/icarus/VST_Data/data_run%R_%#_%to.root"
    compressionLevel: 0

    fileProperties:{
          maxEvents: 100
	  maxSubRuns: 1
	  maxRuns: 1
          granularity: Event
    }
  }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
module_type: ArtdaqInput
waiting_time: 900
resume_after_timeout: true
# fragment_type_map: [ [2, "PHYSCRATEDATA" ] , [3,"PHYSCRATESTAT"]]
}

process_name: Driver
}


fragment_receiver.fragment_id: 0x100E 

fragment_receiver.CrateID: 0x2d 

fragment_receiver.pcieLinks: [0, 1] 
#fragment_receiver.pcieLinks: [ 0 ] 

metrics.graphite.namespace: "icarus.tpcee06." 

fragment_receiver.issueStart: false 
