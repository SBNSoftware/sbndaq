# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 500
run_number: 9999999
debug_cout: true

fragment_receiver: {


   generator: PhysCrateData 
   max_fragment_size_bytes: 5000000

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_id: 0
   board_id: 0

   nADCBits: 12   
   SamplesPerChannel: 4096
   ChannelsPerBoard: 64

   # AssignBoardID: true
   # BoardIDs: [ 0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108 ]
   CrateID: 0x1
   
   CompressionScheme: 0

   VetoPort: 7654
   VetoHost: "137.138.194.204"
   DoVetoTest: false
   VetoTestPeriod: 1e6

   pcieLinks: [ 0, 1 ]

   TestPulseType: 3 #0 - disable, 1 - external, 2 - internal_even, 3 - internal_odd
   # TestPulseAmpODD:  [ 0x4000, 0x2000, 0x1000, 0x4010, 0x2010, 0x1010, 0x4100, 0x2100, 0x1100 ]
   # TestPulseAmpEVEN: [ 0x8000, 0x6000, 0x5000, 0x8010, 0x6010, 0x5010, 0x8100, 0x6100, 0x5100 ]

   # BH: About 1400 ADC or so
   #TestPulseAmpODD:  [ 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000 ]
   #TestPulseAmpEVEN: [ 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000, 0xA000 ]

   TestPulseAmpODD:  [ 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000 ]
   TestPulseAmpEVEN: [ 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000 ]

   DACOffset1: [ 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000 ]
   #DACOffset2: [ 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000 ]
   DACOffset2: [ 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000 ]
   
   separate_data_thread: true

   #whether or not to issue SOR and COMMA at begin of run
   #true if pulser trigger input...false if trigger board provides TTLINK
   issueStart: true

   routing_table_config: {
     use_routing_master: false 
  }
   destinations:{console:{threshold:"DEBUG" type:"cout"}}

}  		  

   metrics:{
#     verbosefile: {
#       level_string: "1,2,11-20"
#       metricPluginType: "file"
#       fileMode: "Overwrite"
#       fileName: "metrics.out"
#       uniquify: false
#     }
   }


event_builder: {

  expected_fragments_per_event: 1
  max_fragment_size_bytes: 0x10000000
  buffer_count: 20 
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

######################################################################
# The ART code
######################################################################
art:{
  services: {
    ArtdaqSharedMemoryServiceInterface: { service_provider: ArtdaqSharedMemoryService }
    TimeTracker: {}
    ArtdaqFragmentNamingServiceInterface: { service_provider: ArtdaqFragmentNamingService helper_plugin: "Icarus" }
  }

physics:
{
  analyzers:
  {
  }

  producers:
  {
  }

  p1: [ ]
  e1: [  ]
  end_paths: [ ]
}

outputs:
{

 rootout:
  {
    module_type: RootOutput
    fileName: "/home/nfs/icarus/VST_Data/data_run%R_%#_%to.root"
    compressionLevel: 0

    fileProperties:{
          maxEvents: 100
	  maxSubRuns: 1
	  maxRuns: 1
          granularity: Event
    }
  }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
module_type: ArtdaqInput
waiting_time: 900
resume_after_timeout: true
# fragment_type_map: [ [2, "PHYSCRATEDATA" ] , [3,"PHYSCRATESTAT"]]
}

process_name: Driver
}
#fragment_receiver.fragment_id: 6
#fragment_receiver.CrateID: 0x58
#fragment_receiver.pcieLinks: [ 4, 5 ]

#fragment_receiver.fragment_id: 0x1110
#fragment_receiver.CrateID: 0x66
#fragment_receiver.pcieLinks: [ 6, 7 ]

fragment_receiver.fragment_id: 0x1406
fragment_receiver.CrateID: 0x81
fragment_receiver.pcieLinks: [ 0, 1 ]
