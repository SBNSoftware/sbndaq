services: {
  ArtdaqSharedMemoryServiceInterface: {
    service_provider: ArtdaqSharedMemoryService
  }

  ArtdaqFragmentNamingServiceInterface: { service_provider: ArtdaqFragmentNamingService helper_plugin: "SBND" }
}

daq: {
  event_builder: {

    stale_buffer_timeout_usec: 3000000 #was commented out and 1000000, Gennadiy said to set high (5s) for debugging
    expected_fragments_per_event: 0  # Will be set by DAQInterface
    use_art: true
    print_event_store_stats: true
    buffer_count: 35 #100
    max_incomplete_events: 15 #50 # Same as boardreader sync interval

    verbose: true
    send_requests: true
    request_address: "227.128.11.129"          # Multi-cast request address
    multicast_interface_ip: "10.226.36.0" # needed to send requests successfully through the private network
    request_port: 3001

    art_analyzer_count: 4
    #num_requests: 500

    tcp_receive_buffer_size: 64000
    routing_token_config: {
      use_routing_master: false
    }

    sources: { }
  }
  metrics: {
    evbFile: {
      metricPluginType: "file"
      level_string: "1-10,11-20"
      fileName: "/daq/log/metrics/evb00_metrics.log"
      uniquify: true
    }


    send_system_metrics: true
    send_process_metrics: true

    graphite: {
      level_string: "1-10,11-20"
      metricPluginType: "graphite"
      reporting_interval: 10.0
      host:"10.226.36.34"
      port:2003
      namespace:"sbnd.evb00."
    }
  }
}

outputs: {
  mode0Output: {
    module_type: RootDAQOut
    fileName: "/data/daq/data_mode0_%p_run%R_%#_%to.root"

    fileProperties: { 
      maxSubRuns: 1 
      maxRuns: 1 
      maxEvents: 20 #close files out a little faster for the prescaled stream
    }

    fastCloning: true
    compressionLevel: 0
    SelectEvents: [ mode0 ]    
  }

  Normaloutput: {
    module_type: RootDAQOut
    fileName: "/data/daq/data_%p_run%R_%#_%to.root"

    fileProperties: {
      maxSubRuns: 1
      maxRuns: 1
      maxEvents: 20 #close files out a little faster for the prescaled stream
    }

    fastCloning: true
    compressionLevel: 0
    SelectEvents: [p2]
  }
  testOutput: {
    module_type: RootDAQOut
    fileName: "/data/test_daq/data_%p_run%R_%#_%to.root"

    fileProperties: {
      maxSubRuns: 1
      maxRuns: 1
      maxEvents: 100
    }

    fastCloning: true
    compressionLevel: 0
    SelectEvents: []
  }
  rootNetOutput: {
    module_type: RootNetOutput
    broadcast_sends: true
    nonblocking_sends: true
    destinations: { }
    #SelectEvents: [p1]
    host_map: [{
	rank: -1
	host: "localhost"
      }]

    routing_table_config: {
      use_routing_manager: false
    }

  }
}

physics: {
  analyzers: {
    fragWatcher: {
      module_type: "FragmentWatcher"
    } 
  }

  producers: {

    crttriggerproducer: {
      module_type: "CRTMetricProducer"
      is_persistable: true
      BeamWindowStart: 320000
      BeamWindowEnd: 350000
      Verbose: true  
    }
    
    pmtmetricproducer: {
      module_type: "PMTMetricProducer"
      is_persistable: true
      UseBeamTrigger:   false  # use flash trigger (trigger time stamp) or beam trigger
      
      #   WindowTimeOffset: 0.1    # (uint) offset of trigger time in ticks (1 tick = 2 ns)         
      #                            #    default 30 ticks - WAG for now                         
      #   TrigWindowFrag: 1500     # max time difference for frag timestamp to be part of beam window  
      #                            #  in ticks (1 tick=2 ns), default 100 ticks - WAG for now         
      WindowLength: 0.5 #1.6     # beam window length after trigger time, default 1.6 us                                       
      WvfmPostPercent:  0.8      # this should be a fraction! % of the wvfm contained in the 10 us window.
      # having 1+9 -> 0.9. having 2+8 -> 0.8,
      WvfmNominalLength: 5060    # Used to initialize the flash wvfm length (will be resized if necessary) 

        # event trigger timing configuruables 
        ## priority system 
        ## NTB (RawEventHeader) [0] -> SPEC TDC ETT [1] -> PTB ETT [2] -> TIMING CAEN [3]
        ## if the first one is not available, it will go to the next one
        TimingType: 0
        NTBDelay: 367392 # NTB - FTRIG, ns 

      # event trigger configurables
      #ETrigFragID: 9           # fragID of 1730 with event trigger in ch15
      #ETrigThresh: 9000        # adc threshold for event trigger

      # CAEN 1730 configuration
      FragIDlist: [40960, 40961, 40962, 40963, 40964, 40965, 40966, 40967]  # should have 8 modules
      # PMT channel configurations
      ## 120 entries in order of modules in frag ID list
     # Uncoated: [0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
	#0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,                                                  
	#0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,                                                  
	#0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,                                                  
	#0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,                                                  
	#0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,                                                  
	#0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,                                                  
	#0,0,0,1,1,0,0,0,0,0,0,0,0,1,1]   # 0 is Coated, 1 is Uncoated                   
      #TPC:      [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	#0,1,0,1,0,1,0,1,0,1,0,1,0,1,1]  #  TPC=0(1) is neg(pos) x and beam right(left)
      Verbose: 1 # 0: no printout, 1: printout for each event, 2: printout for each fragment, 3: printout for each channel

      # turn on/off various metric calculations 
      CalculateBaseline:  false  # if true, will calculate baseline, if false, will use provided InputBaseline parameters below! 
      CountPMTs:          true   # if true, will count number of PMTS above threshold in the beam window
      CalculatePEMetrics: false  # if true, will calculate prompt/preliminary PE 
      FindFlashInfo:      true   # if true, will find flash time and flash peak PE by summming all wvfms and finding the peak
      FindPulses:         false  # if true, will use crude pulse finding algorithm. You probably want this set to false!

      # metric input parameters 
      InputBaseline:  [15100.0, 2.0] # in ADC, used if CalculateBaseline is FALSE // first entry is baseline, second entry is baseline error/sigma
      #BaselineWindow: 0.5           # in us; window used to calculate basline

      PromptWindow:   0.1           # in us; window to calculate prompt light (after the trigger)
      PrelimWindow:   0.5           # in us; window to calculate prelim PE (before the trigger)

      ADCThreshold:  14900          # in ADC, corresponds to ~5 PE in ideal response, used for CountPMTs (above threshold)  
      ADCtoPE:        8.0           # conversion factor from ADC to PE count (for a single bin) **not tuned**
      #PEArea:         66.33         # conversion factor from ADCxns area to PE count **not tuned** 
    }


  }

  filters: {
    prescale50: { module_type: "Prescaler"
      prescaleFactor: 50
      prescaleOffset: 0
    }

    prescale10: { module_type: "Prescaler"
      prescaleFactor: 10
      prescaleOffset: 0
    }

    prescale25: { module_type: "Prescaler"
      prescaleFactor: 25
      prescaleOffset: 0
    }

    prescale5: { module_type: "Prescaler"
      prescaleFactor: 5
      prescaleOffset: 0
    }

    prescale1: { module_type: "Prescaler"
      prescaleFactor: 1
      prescaleOffset: 0
    }
  }

  mode0: [ prescale1, pmtmetricproducer ]


  p0: [ ]
  p1: [ prescale1 ]
  p5: [ prescale5 ]

  t1: [ crttriggerproducer ]
  pmttrig: [ pmtmetricproducer ]
  a1: [ fragWatcher ]

  #my_output_modules: []
  my_output_modules: [ mode0Output ]
  #my_output_modules: [ rootNetOutput ]
  #my_output_modules: [ normalOutput ]
  #my_output_modules: [ normalOutput , rootNetOutput ]

  end_paths: [ a1, my_output_modules ]
}
source: {
  module_type: ArtdaqInput
  waiting_time: 2500000
  resume_after_timeout: true
}
process_name: DAQ
