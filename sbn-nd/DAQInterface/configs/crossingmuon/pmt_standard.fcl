daq: 
{
  fragment_receiver: 
  {

    generator:   CAENV1730Readout
    fragment_type: CAENV1730
    max_fragment_size_bytes: 1000000
    GetNextFragmentBunchSize: 20

    fragment_id: 0
    board_id:    1
    
    Verbosity: 1
    SWTrigger: false #false disable the internal trigger of the caen, setting this parameter to true is not enough to activate the internal trigger. by internal trigger we mean that the caen readout is started by tbd conditions in the caen itself

    # begin run ADC calibration, should be set to true for physics running, see CAEN manuals for details
    CalibrateOnConfig: true 
    
    #read and write some calibration parameters
    AdcCalibration: false #Do not touch this for SBND (ICARUS specific). Should be set to false.

    # Turn on or off automatic mid-run temperature correction
    LockTempCalibration: false   # set to false for SBND, baseline is less stable when set to true. Typically used for 1730B but not 1730BS 

    # Set up max temperature board can have before some messages appear
    maxTempCelsius: 75
    poll_hardware_status: true
    hardware_poll_interval_us: 3e7 #us
    temperatureCheckMask: 0xFFFF
    # ModeLVDS 0=REGISTER, 1=TRIGGER, 2=nBUSY/nVETO, 3=LEGACY
    # SBND: keep this parameter = 0
    ModeLVDS: 0

    # selfTrgMode: channel auto trigger settings. Since in x730 boards even and odd 
    # channels are paired, their 'SelfTriggerMode' value will be equal to the 
    # OR combination of the pair, unless one of the two channels of
    # the pair is disabled (by 'SelfTriggerMask' parameter). 
    # If so, the other one behaves as usual.
    # SelfTriggerMode 0:DISABLED 1:ACQ_ONLY 2:TRGOUT_ONLY 3:ACQ_AND_TRGOUT
    SelfTriggerMode: 0


    # SelfTriggerMask: the channel mask (16bit-number) you will enable the 'SelfTriggerMode'
    # Each bit enables/disables one channel
    # 65535: all channels are enabled
    # 32768: ch0-14 enabled, to be verified
#    SelfTriggerMask: 65535
    SelfTriggerMask: 32768 

    # Majority mode logic
    # For level m, the trigger fires when at least m+1 of the enabled trigger pairs fire
    # Exclusive for SBND, used in trig out logic only
    # ICARUS: (should not interfere but) keep this parameter = 0
    majorityLevel: 0

    # Sets the time window for the majority coincidence in units of the Trigger Clock (8 ns) 
    # 'majorityLevel' must be set different from 0.
    # min: 0, max: 15
    # Exclusive for SBND, used for trig out logic only
    # note that trig out signal does not turn on until the window closes, even if the trigger condition is satisfied sooner
    # ICARUS: (should not interfere but) keep this parameter = 0
    majorityCoincidenceWindow: 0
    
    # Set self trigger logic
    # triggerLogic 0: AND, 1: ONLYA, 2: ONLYB, 3:OR
    # Exclusive for SBND, just for trig out
    # ICARUS: (should not interfere but) keep this parameter = 3
    triggerLogic: 3

    # if a second trigger arrives before the readout is finished, set to false to ignore and true to extend readout
    allowTriggerOverlap: true

    link: 0
    enableReadout: 1
       
    debugLevel:           7
    eventsPerInterrupt:   1
    IRQTimeoutMS:         500
    eventCounterWarning:  1       
    memoryAlmostFull:     2    
    maxEventsPerTransfer: 1
    runSyncMode:          0
    
    readoutMode:          0
    testPattern:          0
    irqWaitTime:          1 
   
    outputSignalMode:     0    
    usePedestals:         false
    dacValue:             32768
    
    # ioLevel: 0=NIM, 1=TTL
    ioLevel:              1
    nChannels:            16
    
    boardId: 0

# default waveform length and postpercent
    recordLength:         10000 #crossing muon needs longer  
    postPercent:          50  
    #Use Trigger Time Tag (TTT) from CAEN header, which is a PPS counter 8ns/tick, to construct fragment timestamp. Default: true for ICARUS, false for SBND
    UseTimeTagForTimeStamp: false 
    TimeOffsetNanoSec: 0
    # Same as above but with a shift  = TTT - record length * post percent to account for TTT pointing to the end of waveform. Default: false for ICARUS, true for SBND
    UseTimeTagShiftForTimeStamp: true #true for SBND, false for ICARUS, add a shift = TTT - record length * post percent     

    
    # extTrgMode decides whether the external trigger should only be used to generate the
    # acquisition trigger, only to generate the trigger output or both
    # SBND: set to 1
    # extTrgMode: 0=DISABLED; 1=ACQ_ONLY; 2=TRGOUT_ONLY; 3=ACQ_AND_TRGOUT
    extTrgMode:          1 
    
    # swTrgMode decides whether the trigger software should only be used to generate the 
    # acquisition trigger, only to generate the trigger output or both. 
    # you should set 'SWTrigger: true' to enable software triggers
    # SBND: set to 0
    # swTrgMode:  0=DISABLED; 1=ACQ_ONLY; 2=TRGOUT_ONLY; 3=ACQ_AND_TRGOUT
    swTrgMode:            0
    
    # acqMode: 0=Software Controlled, 1=Front Panel S_IN
    # SBND: set to 0
    acqMode:              0
    
    # triggerPolarity: 0=positive (trigger on rising edge), 1= negative (trigger on falling edge)
    # Exclusive for SBND
    triggerPolarity: 1
    # Trigger pulse width for TRG_OUT and MON outputs
    # Width will be (triggerPulseWidth)*8ns
    # Exclusive for SBND
    triggerPulseWidth: 10
    # SBND: MTC/A input
    # See CAEN User Manual UM2792, page 51
    # trigger majority mode: 0; test mode (saw-tooth signal with 1V amplitude): 1 
    # buffer ocuppancy mode: 3; voltage level mode: 4 
    # Never change this value from 0
    analogMode:           0
    
    
    CircularBufferSize: 500e6
    destinations: { }

    routing_table_config: {
      use_routing_master: false 
    }
    

# unit of Pedestals are NOT ADC counts.  From the CAEN manual
# The ADC scale ranges from 0 to 2NBit - 1, where NBit is the number of bits of the on-board ADC. The DAC controlling 
# the DC Offset has 16 bits, i.e. it goes from 0 to 65535 independently from the NBit value and the board type.
# Typically a DC Offset value of 32K (DAC mid-scale) corresponds to about the ADC mid-scale. Increasing values of DC
# Offset make the baseline decrease. The range of the DAC is about 5% (typ.) larger than the ADC range, hence DAC
#  settings close to 0 and 64K correspond to ADC respectively over and under range.
#
    channelPedestal0:  6500
    channelPedestal1:  6500
    channelPedestal2:  6500
    channelPedestal3:  6500
    channelPedestal4:  6500
    channelPedestal5:  6500
    channelPedestal6:  6500
    channelPedestal7:  6500
    channelPedestal8:  6500
    channelPedestal9:  6500
    channelPedestal10: 6500
    channelPedestal11: 6500
    channelPedestal12: 6500
    channelPedestal13: 6500
    channelPedestal14: 6500
    channelPedestal15: 55000 #60000

    #Set to true to save the waveform
    channelEnable0:    true
    channelEnable1:    true
    channelEnable2:    true
    channelEnable3:    true
    channelEnable4:    true
    channelEnable5:    true
    channelEnable6:    true
    channelEnable7:    true
    channelEnable8:    true
    channelEnable9:    true
    channelEnable10:   true
    channelEnable11:   true
    channelEnable12:   true
    channelEnable13:   true
    channelEnable14:   true
    channelEnable15:   true

    
    BoardChainNumber: 0
    GetNextSleep: 10
    InterruptEnable: 1
    
    InterruptLevel: 0
    InterruptStatusID: 0
    InterruptEventNumber: 1

    # 0 = 2 V dynamic range, 1 = 0.5 V 
    # register 0x8028
    # SBND: set to O
    dynamicRange: 0 

# units of threshold are ADC counts (to be confirmed) from 0-16,383 (14 bits)
    triggerThreshold0:  0
    triggerThreshold1:  0
    triggerThreshold2:  0
    triggerThreshold3:  0
    triggerThreshold4:  0
    triggerThreshold5:  0
    triggerThreshold6:  0
    triggerThreshold7:  0
    triggerThreshold8:  0
    triggerThreshold9:  0
    triggerThreshold10: 0
    triggerThreshold11: 0
    triggerThreshold12: 0
    triggerThreshold13: 0
    triggerThreshold14: 0
    triggerThreshold15: 2000




#------------------------------------------------------------------
#  Everything here is exclusive for ICARUS, but must be defined 
     LVDSLogicValueG1: 3
     LVDSLogicValueG2: 3
     LVDSLogicValueG3: 3
     LVDSLogicValueG4: 3
     LVDSLogicValueG5: 3
     LVDSLogicValueG6: 3
     LVDSLogicValueG7: 3
     LVDSLogicValueG8: 3
#     
     LVDSOutWidthC1: 20
     LVDSOutWidthC2: 20
     LVDSOutWidthC3: 20
     LVDSOutWidthC4: 20
     LVDSOutWidthC5: 20
     LVDSOutWidthC6: 20
     LVDSOutWidthC7: 20
     LVDSOutWidthC8: 20
     LVDSOutWidthC9: 20
     LVDSOutWidthC10: 20
     LVDSOutWidthC11: 20
     LVDSOutWidthC12: 20
     LVDSOutWidthC13: 20
     LVDSOutWidthC14: 20
     LVDSOutWidthC15: 20
     LVDSOutWidthC16: 20
    
     # Aiwu added here: self trigger plority, it is 0x10 (or 16 in decimal, or 0010000) by default, we want to change bit[6] from 0 to 1, so 0x30 (or 80 in decimal, or 1010000)
     # Exclusive for ICARUS
     SelfTrigBit: 16
#  End ICARUS exclusive parameters
#--------------------------------------------------------------------
  }  


  metrics: {
    brFile: {
      metricPluginType: "file"
      level: 3
      fileName: "/daq/log/metrics/pmtx00_metrics.log"
      uniquify: true
    }
    send_system_metrics: true
    send_process_metrics: true
    graphite:{
      namespace: "sbnd.pmt00."
      host: "10.226.36.34"
      #level: 10
      level_string: "1-10,11-20"
      metricPluginType: "graphite"
      port: 2003
      reporting_interval: 10
		    }
    #       metricPluginType: "redis"
    #   level: 3
    #   reporting_interval: 10.0
    #   redis_key_postfix: ":10s" 
    #   maxlen: 10000
    #   redis_key_prefix: "DABBoardReader:pmtx01:"
    #   redis_passfile: "/var/adm/krb5/redis_password"
    # }
    # redis_testing: {

    #   metricPluginType: "redis"
    #   level: 3
    #   reporting_interval: 30.0
    #   redis_key_postfix: ":testing"
    #   maxlen: 10000
    #   redis_key_prefix: "DABBoardReader:pmtx01:"
    #   redis_passfile: "/var/adm/krb5/redis_password"
    # }
    # redis_5m: {
    #   metricPluginType: "redis"
    #   level: 3
    #   reporting_interval: 300.0
    #   redis_key_postfix: ":5m" 
    #   maxlen: 10000
    #   redis_key_prefix: "DABBoardReader:pmtx01:"
    #   redis_passfile: "/var/adm/krb5/redis_password"
    # }

  }
}
