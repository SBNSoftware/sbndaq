daq: {

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   max_fragment_size_bytes: 100000                  
   generator: TriggerBoardReader
   #fragment_type: TriggerBoard        # Make sure downstream modules know about this fragment_type!
   fragment_type: PTB        # Make sure downstream modules know about this fragment_type!
   fragment_id: 8        # Make sure downstream modules know about this fragment_type!

   ##------------------------------------------------------------------------------
   ## Variable of interest for the new PTB Fragment Generator
   ##------------------------------------------------------------------------------

   #board_address: "sbnd-ptbmk2-01"  # -- D0 PTB
   #board_address: "192.168.230.77"  # -- D0 PTB

   #board_address: "10.226.35.151"   # -- ND PTB
   board_address: "sbnd-ptbmk2-02"   # -- ND PTB
   control_port  : 8991              # Default 8991 

   # Boardreader full host name or IP address
   boardreader_address: "sbnd-ptb01-daq.fnal.gov"
   
   calibration_stream_output : "/data/ptb/DebugStream"     ## this is the string that points to a writable directory if 
                                                      ## if this option is not there, there won't be a calibration str
   # calibration_update : 5. ## minimum amont of minutes that before updating the calibration stream file. Default 5 minutes

   ## ------------------------------------------------------------------------
   ## conditions to trigger a fragment generator. 
   ## ------------------------------------------------------------------------
   ## Ideally a fragment is created whenever a certain number of packages from the board is received. 
   ## Packages in this context means everything between a TS word and the next, as they are regular in time. 
   ## This minimum number of packages is called group_size and it's default value is 1 .
   ## This option can be disabled simply requesting groupd_size = 0. In that case the fragment will contain all the 
   ## words present in the buffer at the moment of getNext_() call without restrictions based on the number of TS words .
   ## Anyway, to avoid the saturation of the buffers, a fragment is ALWAYS created whenever the number of words in the 
   ## buffer is bigger than than max_words_per_frag. 
   group_size : 1
   #group_size : 30    ## -- this sets how many pakages from the board should be grouped to form a fragment. Default 1 
                           ##    value 0 means that the fragments contains all the word contained in the buffer at the moment of getNext_() call
                       ##    without restriction based on the number of TS words. 

   max_words_per_frag : 3000 ## -- default 80 % of the capacity of the words buffer

   max_frags_per_call : 100 ## -- this sets the maximum number of fragments to be returned for each getNext_() call. Default 10 

   #request_address: "227.128.9.129"         ## -- Multi-cast request address
   #request_port: 3001                       ## -- UDP request port
   #multicast_interface_ip: "10.226.36.0"  ## -- needed to send requests successfully through the private network

   #network_group: "-daq" # hostname connection type (private connection is "-priv")
                                            
   #stale_request_timeout : 150000000000     ## -- 150sec
   #window_close_timeout_us: 40000000
   
   #request_mode: "Buffer"                  ## -- the other interesting possibility which is discussed is the "Window" mode
   #request_mode: "Window"                   ## -- the other interesting possibility which is discussed is the "Buffer" mode
   ## request_window_offset                 ## -- Request message contains tzero. Window will be from tzero - offset to tz-o + width
   ## request_window_width                  ## -- These settings correspond to "two before, two after"
   #request_window_width:  50000000           ## -- 5ms of window width. In ns units.
   #request_window_offset: 2500000           ## -- 2.5ms offset. In ns units.
   #request_window_are_unique: false
   #circular_buffer_mode: true
   #separate_data_thread: true
   data_buffer_depth_fragments:2000000 #200000 
   word_buffer_size: 10000 #10000
   throw_exception: true
   run_trigger_output: "/data/ptb"
   receiver_timeout_scaling: 40

   ## -- No comments allowed below here! ------------------------------------------------------

  board_config : '{
   "ctb":{                                                                                               
     "sockets":{
         "receiver":{
             "rollover":500000,
             "host":"10.226.35.150",
             "port":8992
       },
       "monitor":{
         "enable" : false,
         "host": "localhost",
         "port": 8993
         },
       "statistics": {
         "enable":false,
         "port":8994,
         "updt_period": 1
       }
     },
     "misc":{
       "randomtrigger_1":{
         "description":"Random trigger that can optionally be set to fire only during beam spill",
         "enable":false,
         "fixed_freq":true,
         "beam_mode":false,
         "period":25000000,
         "period_old":3333333,
         "seed":"0xACE2ACE1",
         "thresh_lo":"0x00000001",
         "thresh_hi":"0x000F00FF"
       },
       "randomtrigger_2":{
         "description":"Random trigger that can optionally be set to fire only outside of beam spill",
         "enable":false,
         "fixed_freq":true,
         "beam_mode":false,
         "period":25000000,
         "seed":"0x0000ACE1",
         "thresh_lo":"0x00000001",
         "thresh_hi":"0x000F00FF"
       },
       "pulser":{
         "description":"Used to generate a fake BNB cycle. Period and width are in 20ns clock ticks",
         "enable":true,
         "period":66666667,
         "width" :66666666
       },
       "timing":{
         "description":"Unbiased Trigger Control.",
         "tap"          : "0x2",
         "repeater_val" : "0x0",
         "period"       : "0x3",
         "duty"         : "0x3",
         "early_warning_window":{
           "use_count": true,
           "beam_signal_mask": "0x1",
           "window_length": "0x410A"
         },
         "pre_arrival_window":{
           "use_count": true,
           "beam_signal_mask": "0x0",
           "window_length": "0x1F4"
         },
         "beam_acceptance_window":{
           "use_count": true,
           "beam_signal_mask": "0x0",
           "window_length": "0x1"
         },
         "post_arrival_window":{
           "beam_signal_mask": "0x0",
           "window_length": "0x0"
         }
       },
       "debug_outs":{
         "description":"Masks for NIM debug outputs",
         "debug_mask_1":"0x8",
         "debug_mask_2":"0x8"
       },
       "ch_status":false,
       "standalone_enable": true
     },
     "HLT":{
       "command_mask" : {
         "description":"Masks which HLTs correspond to each command. No overlaps are allowed.",
         "A" : "0x3F",
         "B" : "0x3F",
         "C" : "0x7F",
         "T" : "0x1"
       },
       "trigger": [
         { "id":"HLT_1",
           "description": "AND of upstream CRT layers",
           "enable":false,
           "minc" : "0x800",
           "mexc" : "0x0",
           "prescale" : "0x1"
         },
         { "id":"HLT_2",
           "description": "AND of CRT upstream panel layers and pre-arrival gate",
           "enable":true,
           "minc" : "0x10000000",
           "mexc" : "0x0",
           "prescale" : "0x1"
         },
         { "id":"HLT_3",
           "description": "AND of CRT downstream panel layers and beam acceptance gate",
           "enable":false,
           "minc" : "0x20002000",
           "mexc" : "0x0",
           "prescale" : "0x1"
         },
         { "id":"HLT_4",
           "description": "AND of CRT upstream+downstream panel (panel layers AND-d) and pre-arrival gate",
           "enable":false,
           "minc" : "0x20000000",
           "mexc" : "0x0",
           "prescale" : "0x1"
         },
         { "id":"HLT_5",
           "description": "Pure Cosmic trigger",
           "enable":false,
           "minc" : "0x2",
           "mexc" : "0x0",
           "prescale" : "0x1"
         },
         { "id":"HLT_6",
           "description": "Pure Cosmic trigger",
           "enable":false,
           "minc" : "0x18",
           "mexc" : "0x0",
           "prescale" : "0x1"
         },
         { "id":"HLT_7",
           "description": "Pure Cosmic trigger",
           "enable":false,
           "minc" : "0x3",
           "mexc" : "0x0",
           "prescale" : "0x1"
         }
       ]
     },
     "subsystems":{
       "pds":{
         "channel_mask":"0x3FF",
         "reshape_length" : 50,
         "delays":[0,0,0,0,0,0,0,0,0,0],
         "triggers": [
           { "id":"LLT_14",
             "description": "Any CAEN input",
             "enable":false,
             "mask" : "0x3FF",
             "type" : "0x1",
             "count" : "0x0"
           },
           { "id":"LLT_17",                   
             "description": "PDS include 2 SSPs near the beam plug",
             "enable":false,
             "mask" : "0x3FF",
             "type" : "0x2",
             "count" : "0x2"
           }
         ]
       },
       "crt":{
         "channel_mask": "0x3FFF",
         "pixelate": false,
         "reshape_length" : 50,
         "delays":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         "triggers": [
           { "id":"LLT_11",
             "description": "UP 2 CRT channel AND-d layers (type=0x2 is ==count)",
             "enable":false,
             "mask" : "0x500",
             "type" : "0x2",
             "count" : "0x2"
           },
           { "id":"LLT_12",
             "description": "UP 2 CRT channel OR layers (type=0x1 is >count)",
             "enable":false,
             "mask" : "0x500",
             "type" : "0x1",
             "count" : "0x0"
           },
           { "id":"LLT_13",
             "description": "DOWN 2 CRT channel AND-d layers (type=0x2 is ==count)",
             "enable":false,
             "mask" : "0x50",
             "type" : "0x2",
             "count" : "0x2"
           },
           { "id":"LLT_15",
             "description": "Any upstream CRT Jura side",
             "enable":false,
             "mask" : "0x9",
             "type" : "0x1",
             "count" : "0x0"
           },
           { "id":"LLT_16",
             "description": "Any downstream CRT Jura side",
             "enable":false,
             "mask" : "0x6",
             "type" : "0x1",
             "count" : "0x0"
           },
           { "id":"LLT_18",
             "description": "Spare",
             "enable":false,
             "mask" : "0x0",
             "type" : "0x1",
             "count" : "0x0"
           }
         ]
       },
       "beam":{
         "channel_mask": "0x7",
         "reshape_length" : 50,
         "delays": [0,0,0],
         "triggers": [
           { "id":"LLT_1",
             "description": "Beam input 1",
             "enable":false,
             "mask" : "0x1"
           },
           { "id":"LLT_2",
             "description": "Beam input 2",
             "enable":false,
             "mask" : "0x2"
           },
           { "id":"LLT_3",
             "description": "Beam input 1 & 2",
             "enable":false,
             "mask" : "0x3"
           },
           { "id":"LLT_4",
             "description": "Beam input 3",
             "enable":false,
             "mask" : "0x4"
           },
           { "id":"LLT_5",
             "description": "Spare",
             "enable":false,
             "mask" : "0x5"
           },
           { "id":"LLT_6",
             "description": "Beam gate selection",
             "enable":false,
             "mask" : "0x6"
           },
           { "id":"LLT_7",
             "description": "Spare",
             "enable":false,
             "mask" : "0x7"
           },
           { "id":"LLT_8",
             "description": "Spare",
             "enable":false,
             "mask" : "0x0"
           },
           { "id":"LLT_9",
             "description": "Spare",
             "enable":false,
             "mask" : "0x0"
           },
           { "id":"LLT_10",
             "description": "Spare",
             "enable":false,
             "mask" : "0x0"
           }
         ]
       },
       "mtcas":{
        "mtca_thresh1": {
          "hi": 2048,
          "med": 2048,
          "lo": 2048
        },
        "mtca_thresh2": {
          "hi": 2048,
          "med": 2048,
          "lo": 2048
        },
         "channel_mask": "0x3F",
         "reshape_length" : 50,
         "delays": [0,0,0,0,0,0],
         "triggers": [
         ]
       }, 
       "nim":{
         "channel_mask": "0x3F",
         "reshape_length" : 50,
         "delays": [0,0,0,0,0,0],
         "triggers": [
         ]
       }
     }
   }
 }'
                                                        
   ##------------------------------------------------------------------------------
   ## -- Comments are fine below here --------------------------------------------
                                
   nADCcounts: 100
   throttle_usecs: 100  ## -- Wait this many usecs before creating the next event
   distribution_type: 1

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   #fragment_ids: [8]  ## -- In the case of just one fragment, "fragment_id: 0" would also work
   board_id: 999 

   destinations: { } 

   routing_table_config: {
     use_routing_master: false
   }

}                 

## -- add metrics stuff here:
  metrics: {
    brFile: {
      metricPluginType: "file"
      level: 3
      fileName: "/daq/log/metrics/ptb_%UID%_metrics.log"
      uniquify: true
    }
    send_system_metrics: true
    send_process_metrics: true
    graphite:{
      namespace: "sbnd.ptb."
      host: "10.226.36.34"
      level_string: "1-10,11-20"
      metricPluginType: "graphite"
      port: 2003
      reporting_interval: 10
    }
  }
}

